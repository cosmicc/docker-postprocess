#!/usr/bin/env python3

'''
GalaxyMedia Deluge & PlexDVR Post Process script for commercial detection and removal and x264 transcoding optimized for Plex direct play.
https://github.com/cosmicc/docker-postprocess
'''

import os
import shutil
import subprocess
import sys
from configparser import ConfigParser
from datetime import datetime
from pathlib import Path
from time import sleep

from deluge_client import DelugeRPCClient
from loguru import logger as log
from psutil import disk_usage

__name__ = 'POSTPROC'

os.setgid(int(os.environ['PGID']))
os.setuid(int(os.environ['PUID']))

configfile = "/config/PostProcess.conf"
config = ConfigParser()
config.read(configfile)

loglevel = config.get("general", "log_level")
logpath = Path(config.get("general", "log_path"))
process_path = Path(config.get("general", "poll_path"))
transcode_path = Path(config.get("general", "transcode_path"))
mp4logpath = Path(config.get("general", "mp4log_path")).mkdir(parents=True, exist_ok=True)
deluge_host = config.get("deluge", "host")
deluge_port = int(config.get("deluge", "port"))
deluge_username = config.get("deluge", "username")
deluge_password = config.get("deluge", "password")

pausefile1 = process_path / '.pause'
pausefile2 = Path('/config/.pause')
nodeluge = process_path / '.nodeluge'

finishlog = Path('/config/logs/completed.log')

log.remove()
log.level("STARTUP", no=20, color="<fg 39>", icon="¤")
log.level("START", no=20, color="<fg 39>", icon="¤")
log.level("FINISH", no=20, color="<fg 39>", icon="¤")

logformat = "{time:YYYY-MM-DD HH:mm:ss.SSS}|{name: <8}|{level: <7}| {message: <72}"
debuglogformat = "{time:YYYY-MM-DD HH:mm:ss.SSS}|{name}:{line}:{function}|{level: <7}| {message: <72}"

if loglevel == "TRACE":
    lev = 5
    logf = debuglogformat
elif loglevel == "DEBUG":
    lev = 10
    logf = debuglogformat
elif loglevel == "INFO":
    lev = 20
    logf = logformat
elif loglevel == "WARNING":
    lev = 30
    logf = logformat
else:
    lev = 40
    logf = logformat

log.add(sys.stderr, level=lev, backtrace=True, diagnose=True, format=logf)
log.add(sink=str(logpath), level=lev, buffering=1, enqueue=True, backtrace=True, diagnose=True, serialize=False, colorize=False, delay=False, format=logf)

comskip_error = ('Success', 'Did not modify original', 'Sanity Check Failed', 'Exception Handled', 'Failed')


def syncfs():
    subprocess.Popen('/bin/sync').wait()


def determine_conversionfile(file):
    epaths = ['/downloads/process/complete/dvr', '/downloads/process/complete/tv', '/downloads/process/complete/movies', '/downloads/process/complete/nocategory']
    log.debug(f'Trying to determine output filename from: [{file.stem}]')
    syncfs()
    for epath in epaths:
        foundfile = Path(f'{epath}/{file.stem}.mp4')
        log.debug(f'Looking for: {str(foundfile)}')
        if foundfile.exists():
            log.info(f'Found converted file: {str(foundfile)}')
            return foundfile
        else:
            log.warning(f'Could not find a converted file from: {file.stem}.mp4')
            return False


def failfile(file, reason, plexdvr=False):
    filep = file.with_suffix(f'.{reason}')
    failpath = Path('/downloads/process/failed')
    tofile = failpath / filep.name
    shutil.copy2(file, tofile)
    file.unlink()
    log.info(f'File marked failed ({reason}): {str(tofile)}')
    if plexdvr:
        dvrfailfile = Path(f'/downloads/complete/dvr/{file.stem}.failed')
        dvrfailfile.write_text(f'{reason}')
        log.info(f'Sent fail result to Plex: {str(dvrfailfile)}')


# Human-readable bytes.
def sizeof_fmt(num, suffix='B'):
    for unit in ['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z']:
        if abs(num) < 1024.0:
            return "%3.1f%s%s" % (num, unit, suffix)
        num /= 1024.0
    return "%.1f%s%s" % (num, 'Y', suffix)


def finish_log(label, result, videofile):
    if isinstance(videofile, str):
        logline = f'{datetime.now()},{label},{result},{videofile}\n'
    else:
        logline = f'{datetime.now()},{label},{result},{videofile.name}\n'
    with open(str(finishlog), "a") as finishfile:
        finishfile.write(logline)
    log.info(f'Wrote finishlog: {label},{result},{videofile}')


def check_pause():
    if pausefile1.exists() or pausefile2.exists():
        log.warning('Pause file detected. Pausing Script')
        while pausefile1.exists() or pausefile2.exists():
            sleep(10)
        log.warning('Pause file cleared. Resuming Script')


def getsize(pobj):
    if pobj.is_dir():
        return sum(f.stat().st_size for f in pobj.glob('**/*') if f.is_file())
    elif pobj.is_file():
        return pobj.stat().st_size
    else:
        log.error(f'Error determining file/dir object size for: {str(pobj)}')
        return 0


def checkdelugeconnection():
    if client.connected:
        return True
    else:
        try:
            client.connect()
        except:
            log.error(f'Cannot connect to deluge server: {deluge_host}:{deluge_port} Disabling Deluge Processing.')
            return False
        else:
            if client.connected:
                log.info(f'Connected to deluge server: {deluge_host}:{deluge_port}')
                if nodeluge.is_file():
                    log.warning(f'Deluge .nodeluge file found in poll directory. Disabling Deluge Processing.')
                    return False
                else:
                    log.info('Enabling Deluge Processing')
                    return True
            else:
                log.error(f'Cannot connect to deluge server: {deluge_host}:{deluge_port} Disabling Deluge Processing.')
                return False


def check_transdir():
    if not transcode_path.is_dir():
        log.critical(f'Transcode path {str(transcode_path)} does not exist. Exiting.')
        os._exit(3)


def plexdvrprocess(file):
    ptype = 'plexdvr'
    fcontents = file.read_text()
    procfull = Path(fcontents.strip())
    procfile = procfull.name
    log.log('START', f'Starting PlexDVR post-process: {str(procfile)}')
    log.debug(f'Process full filepath: {str(procfull)}')
    log.debug(f'Process File: {str(procfile)}')
    procpath = procfull.parent
    log.debug(f'Process File Path: {str(procpath)}')
    if procfull.exists():
        log.info(f'Executing PlexComskip for: {str(procfile)}')
        cmd = ['/opt/PlexComskip.py', f'{str(procfull)}']
        # log.debug(f'cmd: {cmd}')
        process = subprocess.Popen(cmd)
        result = process.wait()
        if result != 0 and result != 2 and result != 1 and result != 4:
            log.error(f'Error ({comskip_error[result]}) returned from comskip')
            failfile(file, 'comskip_failed', plexdvr=True)
            finish_log(ptype, f'comskip error ({comskip_error[result]})', file)
        else:
            if result == 0:
                log.success(f'Comskip completed ({comskip_error[result]})')
            else:
                log.warning(f'Comskip completed ({comskip_error[result]})')
            if 'News' in str(procfile):
                configfile = Path('/config/autoProcessNEWS.ini')
            else:
                configfile = Path('/config/autoProcessDVR.ini')
            transcode_video(file, procfull, configfile, True)
    else:
        log.error(f'Cannot process video, file is missing')
        failfile(file, 'missing', plexdvr=True)
        finish_log(ptype, f'missing file', file)
    log.log('FINISH', f'Finished PlexDVR file proccessing: {str(procfile)}')
    syncfs()


def delugeprocess(file):
    ptype = 'deluge'
    fcontents = file.read_text()
    fsplit = fcontents.split('|')
    if len(fsplit) < 4:
        log.warning(f'Cannot parse process file contents: ({str(file)})')
        failfile(file, 'ignored')
        finish_log(ptype, f'parse error', file)
    else:
        procfile = Path(fsplit[2])
        log.log('START', f'Starting Deluge post-process: {str(procfile)}')
        log.debug(f'Process File: {str(procfile)}')
        procpath = Path(fsplit[3])
        log.debug(f'Process File Path: {str(procpath)}')
        downloadid = fsplit[1]
        log.debug(f'Deluge Download ID: {downloadid}')
        procfull = procpath / procfile
        log.debug(f'Process full filepath: {str(procfull)}')
        if str(procpath) == '/downloads/complete/tv':
            configfile = Path('/config/autoProcessTV.ini')
        elif str(procpath) == '/downloads/complete/movies':
            configfile = Path('/config/autoProcessMOVIE.ini')
        if 'Mandalorian' in str(procfile) or 'Universe' in str(procfile) or 'Planet' in str(procfile):
            configfile = Path('/config/autoProcessTVHD.ini')
        if transcode_video(file, procfull, configfile, False):
            try:
                client.call('core.remove_torrent', downloadid, True)
            except:
                log.exception(f'Deluge removal failed: {str(procfile)}')
            else:
                log.info(f'Deluge removal success: {str(procfile)}')
            torrentfile = Path('/downloads/torrents') / (str(procfile) + '.torrent')
            if torrentfile.exists():
                torrentfile.unlink()
                log.info(f'Removed torrent file: {str(torrentfile)}')
            else:
                log.warning(f'No torrent file to remove: {str(torrentfile)}')
        log.log('FINISH', f'Finished Deluge file proccessing: {str(procfile)}')
        syncfs()


def transcode_video(file, videofile, configfile, plexdvr):
    if plexdvr:
        ptype = 'plexdvr'
    else:
        ptype = 'deluge'
    log.info(f'Using x264 config file: {str(configfile)}')
    if videofile.exists():
        start_size = getsize(videofile)
        if start_size < 100000000:
            log.error(f'Video file under 100MB, considering failed')
            failfile(file, 'too_small', plexdvr=plexdvr)
            finish_log(ptype, f'empty video file', file)
            return False
        else:
            log.info(f'Starting x264 conversion {sizeof_fmt(start_size)}: {videofile.name}')
            cmd = ['/usr/bin/python3', '/opt/mp4_automator/manual.py', '-i', f'{videofile}', '-a', '-c', f'{str(configfile)}']
            # log.debug(f'cmd: {cmd}')
            process = subprocess.Popen(cmd)
            result = process.wait()
            if result == 0:
                convfile = determine_conversionfile(videofile)
                if convfile:
                    end_size = sizeof_fmt(getsize(convfile))
                    log.debug(f'Converted filesize: {end_size}')
                else:
                    end_size = 'N/A'
                log.success(f'x264 Conversion successful: [{sizeof_fmt(start_size)}->{end_size}] {videofile.name}')
                if file.exists():
                    file.unlink()
                else:
                    log.warning(f'Trying to remove file but doesnt exist: {str(file)}')
                finish_log(ptype, f'success', f'[{sizeof_fmt(start_size)}->{end_size}] {file}')
                syncfs()
                return True
            else:
                log.error(f'Error ({result}) returned in x264 conversion')
                failfile(file, 'conversion_failed', plexdvr=plexdvr)
                finish_log(ptype, f'conversion error ({result})', file)
                return False
    else:
        log.error(f'Cannot convert video, file is missing')
        failfile(file, 'missing', plexdvr=plexdvr)
        finish_log(ptype, f'missing file', file)
        return False


log.log('STARTUP', 'Postprocess main script is starting')

if not process_path.is_dir():
    log.error('Poll directory does not exist. Exiting.')
    os._exit(2)

if not transcode_path.is_dir():
    log.critical(f'Transcode path {str(transcode_path)} does not exist. Exiting.')
    os._exit(3)
diskusage = disk_usage('/transcode')
if diskusage[0] < 12884901888:
    log.critical(f'Transcode path {str(transcode_path)} under 12G. Exiting.')
    os._exit(3)
else:
    log.info(f'Transcode path {str(transcode_path)} reports total size of {sizeof_fmt(diskusage[0])}')
tc = 0
for transcontents in transcode_path.iterdir():
    log.debug(f'Transcode trash: {str(transcontents)}')
    tc += 1
if tc > 0:
    log.warning(f'Transode directory {transcode_path} is not empty. Clearing.')
    try:
        os.system('rm -rf %s/*' % transcode_path)
    except:
        log.exception(f'Error clearing transcode directory {str(transcode_path)}')
        os._exit(3)

client = DelugeRPCClient(deluge_host, deluge_port, deluge_username, deluge_password)

while True:
    try:
        # check for .pause file in config or transcode dir and pausse script
        check_pause()
        # Check health of temp trancode dir (usually a ramdrive)
        check_transdir()
        # Check health of Deluge connection
        enabledeluge = checkdelugeconnection()
        # Create the lists of videos to process
        dvrlist = []
        tvlist = []
        movielist = []
        for filep in process_path.iterdir():
            if filep.suffix == '.plexdvr':
                fcontents = filep.read_text()
                if fcontents is None:
                    log.warning(f'Cannot parse process file contents ({str(filep)})')
                    filep.rename(filep.with_suffix('.ignored'))
                else:
                    dvrlist.append(filep)
            elif filep.suffix == '.deluge':
                fcontents = filep.read_text()
                fsplit = fcontents.split('|')
                if len(fsplit) < 4:
                    log.warning(f'Cannot parse process file contents ({str(filep)})')
                    filep.rename(filep.with_suffix('.ignored'))
                else:
                    if enabledeluge:
                        procpath = Path(fsplit[3].strip())
                        if str(procpath) == '/downloads/complete/tv':
                            tvlist.append(filep)
                        elif str(procpath) == '/downloads/complete/movies':
                            movielist.append(filep)
                        else:
                            log.info(f'File {filep.name} from {fsplit[3].strip()} is not a Movie or TV Show. Ignoring.')
                            filep.unlink()
        if len(dvrlist) > 0 or len(tvlist) > 0 or len(movielist) > 0:
            log.info(f'Found {len(dvrlist)} PlexDVR videos, {len(tvlist)} TV Shows, and {len(movielist)} Movies to process')
            # Process any tvdvvr videos in the list first
            if len(dvrlist) > 0:
                plexdvrprocess(dvrlist[0])
            # Process any tv shows in the list next
            elif len(tvlist) > 0:
                delugeprocess(tvlist[0])
            # Process any movies in the list last
            elif len(movielist) > 0:
                delugeprocess(movielist[0])
        else:
            sleep(10)
    except:
        log.exception('Error in postprocess main routine:')
        os._exit(5)
