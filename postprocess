#!/usr/bin/env python3

import os
import subprocess
from pathlib import Path
from sys import exit
from time import sleep

from loguru import logger as log

os.setgid(int(os.environ['PGID']))
os.setuid(int(os.environ['PUID']))

logformat = "{time:YYYY-MM-DD HH:mm:ss.SSS}|{level: <7}|{message: <72}"

log.add(sink=str('/config/logs/postprocess.log'), level=20, buffering=1, enqueue=True, backtrace=True, diagnose=True, serialize=False, colorize=False, delay=False, format=logformat)

process_path = Path('/poll')
mp4logpath = Path('/config/logs/mp4_automator').mkdir(parents=True, exist_ok=True)

if not process_path.exists():
    log.error('Poll directory does not exist!')
    exit(1)

log.info('Postprocess is starting')

while True:
    try:
        skipsleep = False
        for file in process_path.iterdir():
            log.info(f'start of {str(file)}')
            if file.suffix != '.ignored' and file.suffix != '.failed':
                if file.suffix == '.deluge':
                    fcontents = file.read_text()
                    fsplit = fcontents.split('|')
                    if len(fsplit) < 4:
                        log.warning(f'Cannot parse process file contents ({str(file)})')
                        file.rename(file.with_suffix('.ignored'))
                    else:
                        procfile = Path(fsplit[2])
                        procpath = Path(fsplit[3])
                        procfull = procpath / procfile
                        if str(procpath) == '/downloads/complete/tv':
                            configfile = '/config/autoProcessTV.ini'
                        elif str(procpath) == '/downloads/complete/movies':
                            configfile = '/config/autoProcessMOVIE.ini'
                        log.info(f'Starting processing deluge download {str(procfile)}')
                        cmd = ['/usr/bin/python3', '/opt/mp4_automator/manual.py', '-i', f'{procfull}', '-a', '-c', f'{configfile}']
                        log.debug(cmd)
                        process = subprocess.Popen(cmd)
                        result = process.wait()
                        if result == 0:
                            log.info(f'Conversion returned success')
                            file.unlink()
                        else:
                            log.error(f'Error ({result}) returned in conversion')
                            file.rename(file.with_suffix('.failed'))
                        skipsleep = True
                        log.info(f'Finished processing deluge download {str(procfile)}')
    except:
        log.exception('Error in postrocess main routine:')
        exit(1)
    if not skipsleep:
        sleep(30)
