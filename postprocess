#!/usr/bin/env python3

import os
import subprocess
from configparser import ConfigParser
from pathlib import Path
from sys import exit
from time import sleep

from deluge_client import DelugeRPCClient
from loguru import logger as log

os.setgid(int(os.environ['PGID']))
os.setuid(int(os.environ['PUID']))

configfile = "/config/postprocess.ini"
config = ConfigParser()
config.read(configfile)

loglevel = config.get("general", "loglevel")
logpath = Path(config.get("general", "logpath"))
process_path = Path(config.get("general", "pollpath"))
mp4logpath = Path(config.get("general", "mp4logpath")).mkdir(parents=True, exist_ok=True)
deluge_host = config.get("deluge", "host")
deluge_port = int(config.get("deluge", "port"))
deluge_username = config.get("deluge", "username")
deluge_password = config.get("deluge", "password")

logformat = "{time:YYYY-MM-DD HH:mm:ss.SSS}|{level: <7}| {message: <72}"

if loglevel == "TRACE":
    lev = 5
elif loglevel == "DEBUG":
    lev = 10
elif loglevel == "INFO":
    lev = 20
elif loglevel == "WARNING":
    lev = 30
else:
    lev = 40

log.add(sink=str(logpath), level=lev, buffering=1, enqueue=True, backtrace=True, diagnose=True, serialize=False, colorize=False, delay=False, format=logformat)

if not process_path.exists():
    log.error('Poll directory does not exist!')
    exit(1)

log.info('Postprocess is starting')

client = DelugeRPCClient(deluge_host, deluge_port, deluge_username, deluge_password)
client.connect()
if client.connected:
    log.debug('Connected to deluge server')
else:
    log.error('Cannot connect to deluge server!')

while True:
    try:
        skipsleep = False
        for file in process_path.iterdir():
            log.debug(f'Checking {str(file)}')
            if file.suffix != '.ignored' and file.suffix != '.failed':
                if file.suffix == '.tvdvr':
                    fcontents = file.read_text()
                    if fcontents is None:
                        log.warning(f'Cannot parse process file contents ({str(file)})')
                        file.rename(file.with_suffix('.ignored'))
                    else:
                        procfull = Path(fcontents)
                        log.debug(f'Process full filepath: {str(procfull)}')
                        procfile = procfull.name
                        log.debug(f'Process File: {str(procfile)}')
                        procpath = procfull.parent
                        log.debug(f'Process File Path: {str(procpath)}')
                        log.info(f'Starting commercial skip detection for: {str(procpath)}')
                        cmd = ['/usr/local/bin/comskip', '--threads=6', '-t', '-q', '--ini=/config/comskip.ini', f'{str(procfull)}']
                        log.debug(f'cmd: {cmd}')
                        process = subprocess.Popen(cmd)
                        result = process.wait()
                        if result == 0:
                            log.info(f'Comskip returned success')
                            file.unlink()
                        else:
                            log.error(f'Error ({result}) returned in comskip')
                        configfile = '/config/autoProcessDVR.ini'
                        log.debug(f'Using conversion config file: {configfile}')
                        log.info(f'Starting processing live tv dvr {str(procfile)}')
                        cmd = ['/usr/bin/python3', '/opt/mp4_automator/manual.py', '-i', f'{procfull}', '-a', '-c', f'{configfile}']
                        log.debug(f'cmd: {cmd}')
                        process = subprocess.Popen(cmd)
                        result = process.wait()
                        if result == 0:
                            log.info(f'Conversion returned success')
                            file.unlink()
                        else:
                            log.error(f'Error ({result}) returned in conversion')
                            file.rename(file.with_suffix('.failed'))
                        skipsleep = True
                        log.info(f'Finished processing live tv dvr {str(procfile)}')
                elif file.suffix == '.deluge':
                    fcontents = file.read_text()
                    fsplit = fcontents.split('|')
                    if len(fsplit) < 4:
                        log.warning(f'Cannot parse process file contents ({str(file)})')
                        file.rename(file.with_suffix('.ignored'))
                    else:
                        procfile = Path(fsplit[2])
                        log.debug(f'Process File: {str(procfile)}')
                        procpath = Path(fsplit[3])
                        log.debug(f'Process File Path: {str(procpath)}')
                        downloadid = fsplit[1]
                        log.debug(f'Deluge Download ID: {downloadid}')
                        procfull = procpath / procfile
                        log.debug(f'Process full filepath: {str(procfull)}')
                        if str(procpath) == '/downloads/complete/tv':
                            configfile = '/config/autoProcessTV.ini'
                        elif str(procpath) == '/downloads/complete/movies':
                            configfile = '/config/autoProcessMOVIE.ini'
                        log.debug(f'Using conversion config file: {configfile}')
                        log.info(f'Starting processing deluge download {str(procfile)}')
                        cmd = ['/usr/bin/python3', '/opt/mp4_automator/manual.py', '-i', f'{procfull}', '-a', '-c', f'{configfile}']
                        log.debug(cmd)
                        process = subprocess.Popen(cmd)
                        result = process.wait()
                        if result == 0:
                            log.info(f'Conversion returned success, removing from deluge')
                            file.unlink()
                            try:
                                client.call('core.remove_torrent', downloadid, True)
                            except:
                                log.exception(f'Deluge removal for {str(procfile)} failed!')
                            else:
                                log.debug(f'Deluge removal for {str(procfile)} success')
                            torrentfile = Path('/downloads/torrents') / (str(procfile) + '.torrent')
                            log.debug(f'Removing torrent file: {str(torrentfile)}')
                            torrentfile.unlink()
                        else:
                            log.error(f'Error ({result}) returned in conversion')
                            file.rename(file.with_suffix('.failed'))
                        skipsleep = True
                        log.info(f'Finished processing deluge download {str(procfile)}')
    except:
        log.exception('Error in postrocess main routine:')
        exit(1)
    if not skipsleep:
        sleep(30)
